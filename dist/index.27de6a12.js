function HEX(t,s=4){return(t||0).toString(16).padStart(s,"0")}class Component{onOutputChange=null;_output=0;constructor(t){this.diagram=t}get output(){return this._output}set output(t){this._output!==t&&(this._output=t,this.onOutputChanged(),this.onOutputChange?.(t))}}class Multiplexer extends Component{_select=0;constructor(t,s,i,e,h=8){super(t),this.outNUM=s,this.selectNUM=i,this.inputsLEDs=e,this.inputs=Array(h),this.update(),this.onOutputChanged()}set select(t){this._select=t,this.selectNUM&&this.diagram.dig_write(this.selectNUM,this._select,1),this.inputsLEDs?.forEach(((t,s)=>{this.select==s?this.diagram.high(t):this.diagram.low(t)})),this.output=this.inputs[t]||0}get select(){return this._select}setInput(t,s){this.inputs[t]=s}update(){this.output=this.inputs[this._select]||0}onOutputChanged(){this.outNUM&&this.diagram.dig_write(this.outNUM,this.output,4)}}class Memory extends Component{WE=!1;data=0;onArrayChange=null;_addr=0;constructor(t,s,i=4096){super(t),this.outputNUM=s,this._memArray=Array(i),this.onOutputChanged()}get memArray(){return this._memArray}set memArray(t){this._memArray=t,this.output=this._memArray[this._addr]||0}set addr(t){this._addr=t,this.output=this.memArray[t]||0}tick(){this.output=this.memArray[this._addr]||0,this.WE&&(console.log("writing to memory,  address: "+this._addr+" data: "+this.data),this.memArray[this._addr]=this.data,this.onArrayChange?.(this,this._addr||0,this.data||0))}onOutputChanged(){this.outputNUM&&this.diagram.dig_write(this.outputNUM,this.output,4)}}class Register extends Component{load=!1;rst=!1;data=0;value=0;constructor(t,s,i,e,h=!1,n=16){super(t),this.name=s,this.en=h,this.maximum=Math.pow(2,n),this.nibbleCount=Math.ceil(n/4),this.valueNUM=i,this.outputNUM=e,this.onOutputChanged()}tick(){let t=this.value;this.load&&(this.value=this.data),this.en&&(this.value=(this.value+1)%this.maximum),this.rst&&(this.value=0),console.log(this.name+" Value:"+HEX(this.value)+", Data:"+HEX(this.data)+" "+HEX(t)+"=>"+HEX(this.value)+"  [load:"+(this.load?1:0)+", en:"+(this.en?1:0)+", rst:"+(this.rst?1:0)+"]"),this.output=this.value}onOutputChanged(){this.valueNUM&&this.diagram.dig_write(this.valueNUM,this.value,this.nibbleCount),this.outputNUM&&this.diagram.dig_write(this.outputNUM,this.output,this.nibbleCount)}}class Counter extends Register{constructor(t,s,i,e,h=16){super(t,s,i,e,!0,h)}}class ALU extends Component{_portA=0;_portB=0;_func=0;functions=[(t,s)=>t+s,(t,s)=>t&s,(t,s)=>~t,(t,s)=>t<<1,(t,s)=>s];functionNames=["ADD","AND","NOT","LSL","---"];constructor(t,s,i){super(t),this.outNUM=s,this.funcName=i,this.onOutputChanged()}set portA(t){this._portA=t,this.output=this.functions[this._func](this._portA,this._portB)}set portB(t){this._portB=t,this.output=this.functions[this._func](this._portA,this._portB)}set func(t){this._func=t,this.funcName&&this.diagram.changeText(this.funcName,"func: "+this.functionNames[this._func]),this.output=this.functions[this._func](this._portA,this._portB)}onOutputChanged(){this.outNUM&&this.diagram.dig_write(this.outNUM,this.output,4)}}class Decoder extends Component{constructor(t,s,i){super(t),this.outputLEDs=s,s&&this.diagram.high(s[0]),i.forEach(((t,s)=>Object.defineProperty(this,t,{get(){return this.output===s}}))),this.onOutputChanged()}set input(t){this.output=t}onOutputChanged(){this.outputLEDs?.forEach(((t,s)=>{this.output==s?this.diagram.high(t):this.diagram.low(t)}))}}class Encoder extends Component{constructor(t,s,i,e=5){super(t),this.inputLEDIds=s,this.outNum=i,this.nibbleCount=Math.ceil(e/16),this.inputs=Array(e),this.onOutputChanged()}setInput(t,s){this.inputs[t]=s;for(let t=0;t<this.inputs.length;t++)if(this.inputs[t])return void(this.output=t);this.output=0}onOutputChanged(){this.inputLEDIds?.forEach(((t,s)=>{this.inputs[s]?this.diagram.high(t):this.diagram.low(t)})),this.outNum&&this.diagram.dig_write(this.outNum,this.output,this.nibbleCount)}}class Diagram{ledGreen="#00FF00";ledGray="#E6E6E6";CLKup=!1;ACZ=!0;constructor(t){this.diagramSVG=t,this.Mem=new Memory(this,ids.NUM_MEM_OUT,4096),this.AR=new Register(this,"AR",ids.NUM_AC_VALUE,ids.NUM_AC_OUT,!1,12),this.PC=new Register(this,"PC",ids.NUM_PC_VALUE,ids.NUM_PC_OUT,!1,12),this.DR=new Register(this,"DR",ids.NUM_DR_VALUE,ids.NUM_DR_OUT,!1,16),this.ALU=new ALU(this,ids.NUM_ALU_OUT,ids.TXT_ALU_FUNC),this.AC=new Register(this,"AC",ids.NUM_AC_VALUE,ids.NUM_AC_OUT,!1,16),this.IR=new Register(this,"IR",ids.NUM_IR_VALUE,null,!1,16),this.CommonBus=new Multiplexer(this,[ids.NUM_COMMON_BUS_VALUE,ids.NUM_MEM_DATA,ids.NUM_AR_DATA,ids.NUM_PC_DATA,ids.NUM_DR_DATA,ids.NUM_TR_DATA,ids.NUM_IR_DATA,ids.NUM_OUTR_DATA],ids.NUM_COMMON_BUS_SELECT,ids.LED_COMBUS_MUX,8),this.ALUEncoder=new Encoder(this,null,ids.NUM_ALU_FUNCNUM,5),this.SeqDec=new Decoder(this,ids.LED_SEQ_DEC,["T0","T1","T2","T3","T4","T5","T6","T7"]),this.IncDec=new Decoder(this,ids.LED_INC_DEC,["load","store","add","and","jump","jumpz","comp","lsl"]),this.SC=new Counter(this,"SC",null,ids.NUM_SC_VALUE,3),this.Mem.onOutputChange=t=>{console.log("mem output changed=>"+t),this.CommonBus.setInput(0,t)},this.Mem.onArrayChange=t=>{},this.AR.onOutputChange=t=>{this.Mem.addr=t,this.CommonBus.setInput(1,t)},this.PC.onOutputChange=t=>this.CommonBus.setInput(2,t),this.DR.onOutputChange=t=>{this.ALU.portB=t,this.CommonBus.setInput(3,t)},this.ALU.onOutputChange=t=>this.AC.data=t,this.ALUEncoder.onOutputChange=t=>this.ALU.func=t,this.AC.onOutputChange=t=>{this.ALU.portA=t,this.CommonBus.setInput(4,t),this.ACZ=this.signalLED(ids.LED_Z,0===t)},this.IR.onOutputChange=t=>{this.CommonBus.setInput(7,t);let s=Math.floor(t/Math.pow(2,12))%Math.pow(2,16);this.IncDec.input=s,this.dig_write(ids.NUM_IR_OUT,s,1)},this.SC.onOutputChange=t=>this.SeqDec.input=t,this.IncDec.onOutputChange=t=>{},this.SeqDec.onOutputChange=t=>{},this.CommonBus.onOutputChange=t=>{console.log("commonBus output changed =>"+t),[this.Mem,this.DR,this.IR].forEach((s=>{s.data=t})),this.AR.data=t%Math.pow(2,12),this.PC.data=t%Math.pow(2,12)},this.signalLED(ids.LED_CLK,this.CLKup)}tick(){this.CLKup?this.tickRegisters():(this.CommonBus.select=this.SeqDec.T1||this.SeqDec.T3&&this.IncDec.load||this.IncDec.Add&&this.SeqDec.T2||this.IncDec.And&&this.SeqDec.T3?0:this.SeqDec.T0?2:this.IncDec.store&&this.SeqDec.T3?4:this.SeqDec.T2&&(this.IncDec.load||this.IncDec.store||this.IncDec.add||this.IncDec.jump||this.IncDec.jumpz&&this.ACZ)?7:0,this.CommonBus.update(),console.log("common bus select: "+this.CommonBus.select),this.enPC=this.SeqDec.T0,this.loadAC=this.IncDec.load&&this.SeqDec.T4||this.IncDec.add&&this.SeqDec.T4||this.IncDec.and&&this.SeqDec.T4||this.IncDec.comp&&this.SeqDec.T2||this.IncDec.lsl&&this.SeqDec.T2,this.loadM=this.IncDec.store&&this.SeqDec.T3,this.loadAR=this.IncDec.load&&this.SeqDec.T2||this.IncDec.store&&this.SeqDec.T2||this.IncDec.add&&this.SeqDec.T2||this.IncDec.and&&this.SeqDec.T3||this.SeqDec.T0,this.loadPC=this.SeqDec.T2&&(this.IncDec.jump||this.IncDec.jumpz&&this.ACZ),this.loadDR=this.SeqDec.T3&&(this.IncDec.load||this.IncDec.add||this.IncDec.And),this.loadIR=this.SeqDec.T1,this.rstSC=this.IncDec.load&&this.SeqDec.T4||this.IncDec.store&&this.SeqDec.T3||this.IncDec.add&&this.SeqDec.T4||this.IncDec.and&&this.SeqDec.T4||this.IncDec.comp&&this.SeqDec.T2||this.IncDec.lsl&&this.SeqDec.T2||this.IncDec.jump&&this.SeqDec.T2||this.IncDec.jumpz&&this.SeqDec.T2,this.ALUEncoder.setInput(0,this.signalLED(ids.LED_SIG_ADD_T4,this.IncDec.add&&this.SeqDec.T4)),this.ALUEncoder.setInput(1,this.signalLED(ids.LED_SIG_AND_T4,this.IncDec.and&&this.SeqDec.T4)),this.ALUEncoder.setInput(2,this.signalLED(ids.LED_SIG_COMP_T2,this.IncDec.comp&&this.SeqDec.T2)),this.ALUEncoder.setInput(3,this.signalLED(ids.LED_SIG_LSL_T2,this.IncDec.lsl&&this.SeqDec.T2)),this.ALUEncoder.setInput(4,this.signalLED(ids.LED_SIG_LOAD_T4,this.IncDec.load&&this.SeqDec.T4))),this.signalLED(ids.LED_CLK,this.CLKup),this.CLKup=!this.CLKup}tickRegisters(){[this.Mem,this.AR,this.PC,this.DR,this.AC,this.IR,this.SC].forEach((t=>{t.tick()}))}get(t){return this.diagramSVG.getElementById(t)}high(t){Array.isArray(t)?t.forEach((t=>this.high(t))):this.get(t)?.setAttribute("fill",this.ledGreen)}low(t){Array.isArray(t)?t.forEach((t=>this.low(t))):this.get(t)?.setAttribute("fill",this.ledGray)}changeText(t,s){if(Array.isArray(t))return void t.forEach((t=>this.changeText(t,s)));let i=this.get(t);if(null!=i&&(i.innerHTML=s,"foreignObject"===i.previousElementSibling?.tagName)){let t=i.previousElementSibling;for(;t.childElementCount;)t=t.children[0];t.innerHTML=s}}loadMemArray(t){this.Mem.memArray=t}dig_write(t,s,i=4){let e=HEX(s,i);this.changeText(t,e)}set loadM(t){this.Mem.WE=t,this.signalLED(ids.LED_SIG_LOADM,t),console.log("loadM: "+t)}set loadAR(t){this.AR.load=t,this.signalLED(ids.LED_SIG_LOADAR,t),console.log("loadAR: "+t)}set loadPC(t){this.PC.load=t,this.signalLED(ids.LED_SIG_LOADPC,t),console.log("loadPC: "+t)}set enPC(t){this.PC.en=t,this.signalLED(ids.LED_SIG_ENPC,t),console.log("enPC: "+t)}set loadDR(t){this.DR.load=t,this.signalLED(ids.LED_SIG_LOADDR,t),console.log("loadDR: "+t)}set loadAC(t){this.AC.load=t,this.signalLED(ids.LED_SIG_LOADAC,t),console.log("loadAC: "+t)}set loadIR(t){this.IR.load=t,this.signalLED(ids.LED_SIG_LOADIR,t),console.log("loadIR: "+t)}set rstSC(t){this.SC.rst=t,this.signalLED(ids.LED_SIG_RSTSC,t),console.log("rstSC: "+t)}signalLED(t,s){return s?this.high(t):this.low(t),s}}
//# sourceMappingURL=index.27de6a12.js.map
