{"mappings":"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","sources":["src/ids.ts","src/diagram.ts","src/codeEditor.ts","src/app.ts"],"sourcesContent":["export const ids = {\n  LED_SIG_LOADM: [\"path562\", \"path1370\"],\n  LED_SIG_LOADAR: [\"path570\", \"path1378\"],\n  LED_SIG_LOADPC: [\"path1100\", \"path1558\"],\n  LED_SIG_ENPC: [\"path586\", \"path1394\"],\n  LED_SIG_LOADDR: [\"path594\", \"path1402\"],\n  LED_SIG_LOADAC: [\"path1452\", \"path1410-4\"],\n  LED_SIG_LOADINPR: null,\n  LED_SIG_LOADTR: null,\n  LED_SIG_LOADIR: [\"path618\", \"path1426\"],\n  LED_SIG_LOADOUTR: null,\n\n  LED_SIG_ADD_T4: \"path978\",\n  LED_SIG_AND_T4: \"path986\",\n  LED_SIG_COMP_T2: \"path994\",\n  LED_SIG_LSL_T2: \"path1002\",\n  LED_SIG_LOAD_T4: \"path1010\",\n\n  LED_COMBUS_MUX: [\n    \"ellipse892\",\n    \"ellipse894\",\n    \"ellipse896\",\n    \"ellipse898\",\n    \"ellipse900\",\n    \"ellipse902\",\n    \"ellipse904\",\n    \"ellipse906\",\n  ],\n  LED_INC_DEC: [\n    \"ellipse1218\",\n    \"ellipse1210\",\n    \"ellipse1202\",\n    \"ellipse1194\",\n    \"ellipse1186\",\n    \"ellipse1178\",\n    \"ellipse1170\",\n    \"ellipse1162\",\n  ],\n  LED_SEQ_DEC: [\n    \"ellipse1240\",\n    \"ellipse1248\",\n    \"ellipse1256\",\n    \"ellipse1264\",\n    \"ellipse1272\",\n    \"ellipse1280\",\n    \"ellipse1288\",\n    \"ellipse1296\",\n  ],\n\n  LED_SIG_RSTSC: [\"ellipse1314\", \"ellipse1322\"],\n  LED_Z: [\"ellipse1338\", \"ellipse1062\"],\n\n  LED_CLK: [\n    \"path230\",\n    \"path268\",\n    \"path306\",\n    \"path350\",\n    \"path398\",\n    \"path438\",\n    \"path476\",\n    \"path514\",\n    \"path554\",\n    \"path1306\",\n  ],\n\n  NUM_MEM_OUT: \"text788\",\n  NUM_MEM_DATA: \"text636\",\n\n  NUM_AR_DATA: \"text644\",\n  NUM_AR_VALUE: \"text260\",\n  NUM_AR_OUT: null,\n\n  NUM_PC_DATA: \"text654\",\n  NUM_PC_VALUE: \"text298\",\n  NUM_PC_OUT: null,\n\n  NUM_DR_DATA: \"text734\",\n  NUM_DR_VALUE: \"text342\",\n  NUM_DR_OUT: null,\n\n  NUM_AC_VALUE: \"text390\",\n  NUM_AC_OUT: \"text1072\",\n\n  NUM_ALU_FUNCNUM: \"text770\",\n  TXT_ALU_FUNC: \"text762\",\n  NUM_ALU_OUT: \"text662\",\n\n  NUM_IR_DATA: \"text718\",\n  NUM_IR_VALUE: \"text506\",\n  NUM_IR_OUT: \"text1228\",\n\n  NUM_TR_DATA: \"text710\",\n  NUM_OUTR_DATA: \"text726\",\n  NUM_SC_VALUE: \"text1478\",\n\n  NUM_COMMON_BUS_VALUE: \"text912\",\n  NUM_COMMON_BUS_SELECT: [\"text1364\", \"text1356\"],\n};\n","import { ids } from \"./ids\";\n\ntype OutputCallback = (value: number) => void;\ntype ID = string | null;\ntype IDs = Array<string> | null;\n\nexport function HEX(value: number, pad = 4): string {\n  return (value || 0).toString(16).padStart(pad, \"0\");\n}\n\nabstract class Component {\n  public onOutputChange: OutputCallback | null = null;\n  public diagram: Diagram;\n  private _output: number = 0;\n  constructor(diagram: Diagram) {\n    this.diagram = diagram;\n  }\n\n  protected abstract onOutputChanged(): void;\n\n  public get output(): number {\n    return this._output;\n  }\n\n  protected set output(value) {\n    if (this._output !== value) {\n      this._output = value;\n      this.onOutputChanged();\n      this.onOutputChange?.(value);\n    }\n  }\n}\n\nclass Multiplexer extends Component {\n  public outNUM: string | Array<string> | null;\n  public selectNUM: string | Array<string> | null;\n  public inputsLEDs: Array<string> | null;\n\n  private inputs: Array<number>;\n  private _select = 0;\n\n  constructor(\n    diagram: Diagram,\n    outNUM: string | Array<string> | null,\n    selectNUM: string | Array<string> | null,\n    inputsLEDs: Array<string> | null,\n    inputCount = 8\n  ) {\n    super(diagram);\n    this.outNUM = outNUM;\n    this.selectNUM = selectNUM;\n    this.inputsLEDs = inputsLEDs;\n    this.inputs = Array<number>(inputCount);\n    this.update();\n    this.onOutputChanged();\n  }\n\n  public set select(value: number) {\n    this._select = value;\n    if (this.selectNUM) this.diagram.dig_write(this.selectNUM, this._select, 1);\n    this.inputsLEDs?.forEach((LEDid, index) => {\n      if (this.select == index) this.diagram.high(LEDid);\n      else this.diagram.low(LEDid);\n    });\n    this.output = this.inputs[value] || 0;\n  }\n\n  public get select() {\n    return this._select;\n  }\n\n  public setInput(index: number, value: number) {\n    this.inputs[index] = value;\n  }\n\n  public update() {\n    this.output = this.inputs[this._select] || 0;\n  }\n\n  protected override onOutputChanged() {\n    if (this.outNUM) this.diagram.dig_write(this.outNUM, this.output, 4);\n  }\n}\n\nclass Memory extends Component {\n  public WE: boolean = false;\n  public data: number = 0;\n  public onArrayChange:\n    | ((sender: Memory, index: number, data: number) => void)\n    | null = null;\n\n  private _addr: number = 0;\n  private _memArray: Array<number>;\n\n  public outputNUM: string | Array<string> | null;\n\n  constructor(\n    diagram: Diagram,\n    outputNUM: string | Array<string> | null,\n    memSize = 4096\n  ) {\n    super(diagram);\n    this.outputNUM = outputNUM;\n\n    this._memArray = Array<number>(memSize);\n    this.onOutputChanged();\n  }\n\n  public get memArray(): number[] {\n    return this._memArray;\n  }\n\n  public set memArray(value) {\n    this._memArray = value;\n    this.output = this._memArray[this._addr] || 0;\n  }\n\n  public set addr(value: number) {\n    this._addr = value;\n    this.output = this.memArray[value] || 0;\n  }\n\n  public tick(): void {\n    this.output = this.memArray[this._addr] || 0; //update output on uprise clock\n    if (this.WE) {\n      console.log(\n        \"writing to memory,  address: \" + this._addr + \" data: \" + this.data\n      );\n      this.memArray[this._addr] = this.data;\n      this.onArrayChange?.(this, this._addr || 0, this.data || 0);\n    }\n  }\n\n  protected override onOutputChanged(): void {\n    if (this.outputNUM) {\n      this.diagram.dig_write(this.outputNUM, this.output, 4);\n    }\n  }\n}\n\nclass Register extends Component {\n  public load: boolean = false;\n  public en: boolean;\n  public rst: boolean = false;\n  public data: number = 0;\n  public nibbleCount: number;\n  public name: string;\n\n  private value: number = 0;\n  private maximum: number;\n\n  public valueNUM: string | Array<string> | null;\n  public outputNUM: string | Array<string> | null;\n\n  constructor(\n    diagram: Diagram,\n    name: string,\n    valueNUM: string | Array<string> | null,\n    outputNUM: string | Array<string> | null,\n    en = false,\n    bitCount = 16\n  ) {\n    super(diagram);\n    this.name = name;\n    this.en = en;\n    this.maximum = Math.pow(2, bitCount);\n    this.nibbleCount = Math.ceil(bitCount / 4);\n    this.valueNUM = valueNUM;\n    this.outputNUM = outputNUM;\n    this.onOutputChanged();\n  }\n\n  public tick(): void {\n    let tmp = this.value;\n    if (this.load) {\n      this.value = this.data;\n    }\n    if (this.en) this.value = (this.value + 1) % this.maximum;\n    if (this.rst) {\n      this.value = 0;\n    }\n    console.log(\n      this.name +\n        \" Value:\" +\n        HEX(this.value) +\n        \", Data:\" +\n        HEX(this.data) +\n        \" \" +\n        HEX(tmp) +\n        \"=>\" +\n        HEX(this.value) +\n        \"  [load:\" +\n        (this.load ? 1 : 0) +\n        \", en:\" +\n        (this.en ? 1 : 0) +\n        \", rst:\" +\n        (this.rst ? 1 : 0) +\n        \"]\"\n    );\n    this.output = this.value;\n  }\n\n  protected override onOutputChanged() {\n    if (this.valueNUM)\n      this.diagram.dig_write(this.valueNUM, this.value, this.nibbleCount);\n\n    if (this.outputNUM)\n      this.diagram.dig_write(this.outputNUM, this.output, this.nibbleCount);\n  }\n}\n\nclass Counter extends Register {\n  constructor(\n    diagram: Diagram,\n    name: string,\n    valueNUM: string | Array<string> | null,\n    outputNUM: string | Array<string> | null,\n    bitCount = 16\n  ) {\n    super(diagram, name, valueNUM, outputNUM, true, bitCount);\n  }\n}\n\nclass ALU extends Component {\n  private _portA: number = 0;\n  private _portB: number = 0;\n  private _func: number = 0;\n  private functions = [\n    (a: number, b: number) => a + b,\n    (a: number, b: number) => a & b,\n    (a: number, b: number) => ~a,\n    (a: number, b: number) => a << 1,\n    (a: number, b: number) => b,\n  ];\n\n  private functionNames = [\"ADD\", \"AND\", \"NOT\", \"LSL\", \"---\"];\n\n  public outNUM: string | Array<string> | null;\n  public funcName: string | Array<string> | null;\n\n  constructor(\n    diagram: Diagram,\n    outNUM: string | Array<string> | null,\n    funcName: string | Array<string> | null\n  ) {\n    super(diagram);\n    this.outNUM = outNUM;\n    this.funcName = funcName;\n    this.onOutputChanged();\n  }\n\n  public set portA(value: number) {\n    this._portA = value;\n    this.output = this.functions[this._func](this._portA, this._portB);\n  }\n\n  public set portB(value: number) {\n    this._portB = value;\n    this.output = this.functions[this._func](this._portA, this._portB);\n  }\n\n  public set func(value: number) {\n    this._func = value;\n    if (this.funcName)\n      this.diagram.changeText(\n        this.funcName,\n        \"func: \" + this.functionNames[this._func]\n      );\n    this.output = this.functions[this._func](this._portA, this._portB);\n  }\n\n  protected override onOutputChanged() {\n    if (this.outNUM) this.diagram.dig_write(this.outNUM, this.output, 4);\n  }\n}\n\nclass Decoder extends Component {\n  public outputLEDs: Array<string> | null;\n\n  constructor(\n    diagram: Diagram,\n    outputLEDs: Array<string> | null,\n    outputLabels: Array<string>\n  ) {\n    super(diagram);\n    this.outputLEDs = outputLEDs;\n    if (outputLEDs) this.diagram.high(outputLEDs[0]);\n    outputLabels.forEach((label, index) =>\n      Object.defineProperty(this, label, {\n        get() {\n          return this.output === index;\n        },\n      })\n    );\n    this.onOutputChanged();\n  }\n\n  public set input(value: number) {\n    this.output = value;\n  }\n\n  protected override onOutputChanged(): void {\n    this.outputLEDs?.forEach((LEDId, index) => {\n      if (this.output == index) this.diagram.high(LEDId);\n      else this.diagram.low(LEDId);\n    });\n  }\n}\n\ninterface Decoder {\n  [x: string]: boolean | any;\n}\n\nclass Encoder extends Component {\n  public inputLEDIds: Array<string> | null;\n  public outNum: string | Array<string> | null;\n  public nibbleCount: number;\n  private inputs: Array<boolean>;\n\n  constructor(\n    diagram: Diagram,\n    inputLEDIds: Array<string> | null,\n    outNum: string | Array<string> | null,\n    inputCount = 5\n  ) {\n    super(diagram);\n    this.inputLEDIds = inputLEDIds;\n    this.outNum = outNum;\n    this.nibbleCount = Math.ceil(inputCount / 16);\n    this.inputs = Array<boolean>(inputCount);\n    this.onOutputChanged();\n  }\n\n  public setInput(key: number, value: boolean) {\n    this.inputs[key] = value;\n    //priority encoder:\n    for (let i: number = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i]) {\n        this.output = i;\n        return;\n      }\n    }\n    this.output = 0;\n  }\n\n  protected override onOutputChanged(): void {\n    this.inputLEDIds?.forEach((id, i) => {\n      if (this.inputs[i]) this.diagram.high(id);\n      else this.diagram.low(id);\n    });\n\n    if (this.outNum)\n      this.diagram.dig_write(this.outNum, this.output, this.nibbleCount);\n  }\n}\n\nexport class Diagram {\n  ledGreen = \"#00FF00\";\n  ledGray = \"#E6E6E6\";\n\n  Mem: Memory;\n  AR: Register;\n  PC: Register;\n  DR: Register;\n  ALU: ALU;\n  AC: Register;\n  IR: Register;\n  CommonBus: Multiplexer;\n  ALUEncoder: Encoder;\n  SeqDec: Decoder;\n  IncDec: Decoder;\n  SC: Counter;\n  CLKup = false;\n\n  ACZ = true;\n\n  public diagramSVG: XMLDocument;\n  constructor(diagram: XMLDocument) {\n    this.diagramSVG = diagram;\n    this.Mem = new Memory(this, ids.NUM_MEM_OUT, 4096);\n    this.AR = new Register(\n      this,\n      \"AR\",\n      ids.NUM_AC_VALUE,\n      ids.NUM_AC_OUT,\n      false,\n      12\n    );\n    this.PC = new Register(\n      this,\n      \"PC\",\n      ids.NUM_PC_VALUE,\n      ids.NUM_PC_OUT,\n      false,\n      12\n    );\n    this.DR = new Register(\n      this,\n      \"DR\",\n      ids.NUM_DR_VALUE,\n      ids.NUM_DR_OUT,\n      false,\n      16\n    );\n    this.ALU = new ALU(this, ids.NUM_ALU_OUT, ids.TXT_ALU_FUNC);\n    this.AC = new Register(\n      this,\n      \"AC\",\n      ids.NUM_AC_VALUE,\n      ids.NUM_AC_OUT,\n      false,\n      16\n    );\n    this.IR = new Register(this, \"IR\", ids.NUM_IR_VALUE, null, false, 16);\n    this.CommonBus = new Multiplexer(\n      this,\n      [\n        ids.NUM_COMMON_BUS_VALUE,\n        ids.NUM_MEM_DATA,\n        ids.NUM_AR_DATA,\n        ids.NUM_PC_DATA,\n        ids.NUM_DR_DATA,\n        ids.NUM_TR_DATA,\n        ids.NUM_IR_DATA,\n        ids.NUM_OUTR_DATA,\n      ],\n      ids.NUM_COMMON_BUS_SELECT,\n      ids.LED_COMBUS_MUX,\n      8\n    );\n    this.ALUEncoder = new Encoder(this, null, ids.NUM_ALU_FUNCNUM, 5);\n    this.SeqDec = new Decoder(this, ids.LED_SEQ_DEC, [\n      \"T0\",\n      \"T1\",\n      \"T2\",\n      \"T3\",\n      \"T4\",\n      \"T5\",\n      \"T6\",\n      \"T7\",\n    ]);\n    this.IncDec = new Decoder(this, ids.LED_INC_DEC, [\n      \"load\",\n      \"store\",\n      \"add\",\n      \"and\",\n      \"jump\",\n      \"jumpz\",\n      \"comp\",\n      \"lsl\",\n    ]);\n    this.SC = new Counter(this, \"SC\", null, ids.NUM_SC_VALUE, 3); // for this one showing output in value box\n\n    this.Mem.onOutputChange = (v) => {\n      console.log(\"mem output changed=>\" + v);\n      this.CommonBus.setInput(0, v);\n    };\n\n    this.Mem.onArrayChange = (v) => {\n      // TODO: implement this\n    };\n\n    this.AR.onOutputChange = (v) => {\n      this.Mem.addr = v;\n      this.CommonBus.setInput(1, v);\n    };\n\n    this.PC.onOutputChange = (v) => this.CommonBus.setInput(2, v);\n    this.DR.onOutputChange = (v) => {\n      this.ALU.portB = v;\n      this.CommonBus.setInput(3, v);\n    };\n    this.ALU.onOutputChange = (v) => (this.AC.data = v);\n    this.ALUEncoder.onOutputChange = (v) => (this.ALU.func = v);\n    this.AC.onOutputChange = (v) => {\n      this.ALU.portA = v;\n      this.CommonBus.setInput(4, v);\n      this.ACZ = this.signalLED(ids.LED_Z, v === 0);\n    };\n    this.IR.onOutputChange = (v) => {\n      this.CommonBus.setInput(7, v);\n      let inc = Math.floor(v / Math.pow(2, 12)) % Math.pow(2, 16);\n      this.IncDec.input = inc; // extracting [15:12] bits\n      this.dig_write(ids.NUM_IR_OUT, inc, 1);\n    };\n    this.SC.onOutputChange = (v) => (this.SeqDec.input = v);\n    this.IncDec.onOutputChange = (v) => {\n      //TODO: implement this\n    };\n    this.SeqDec.onOutputChange = (v) => {\n      //TODO: implement this\n    };\n    this.CommonBus.onOutputChange = (v) => {\n      console.log(\"commonBus output changed =>\" + v);\n      [this.Mem, this.DR, this.IR].forEach((comp) => {\n        comp.data = v;\n      });\n      this.AR.data = v % Math.pow(2, 12);\n      this.PC.data = v % Math.pow(2, 12);\n    };\n    this.signalLED(ids.LED_CLK, this.CLKup);\n  }\n\n  public signals() {\n    this.CommonBus.select =\n      this.SeqDec.T1 ||\n      (this.SeqDec.T3 && this.IncDec.load) ||\n      (this.IncDec.Add && this.SeqDec.T2) ||\n      (this.IncDec.And && this.SeqDec.T3)\n        ? 0 // select mem\n        : this.SeqDec.T0\n        ? 2 // select PC\n        : this.IncDec.store && this.SeqDec.T3\n        ? 4 // select AC\n        : this.SeqDec.T2 &&\n          (this.IncDec.load ||\n            this.IncDec.store ||\n            this.IncDec.add ||\n            this.IncDec.jump ||\n            (this.IncDec.jumpz && this.ACZ))\n        ? 7 // select IR\n        : 0; // Default\n    this.CommonBus.update();\n    console.log(\"common bus select: \" + this.CommonBus.select);\n\n    this.enPC = this.SeqDec.T0;\n\n    this.loadAC =\n      (this.IncDec.load && this.SeqDec.T4) ||\n      (this.IncDec.add && this.SeqDec.T4) ||\n      (this.IncDec.and && this.SeqDec.T4) ||\n      (this.IncDec.comp && this.SeqDec.T2) ||\n      (this.IncDec.lsl && this.SeqDec.T2);\n\n    this.loadM = this.IncDec.store && this.SeqDec.T3;\n\n    this.loadAR =\n      (this.IncDec.load && this.SeqDec.T2) ||\n      (this.IncDec.store && this.SeqDec.T2) ||\n      (this.IncDec.add && this.SeqDec.T2) ||\n      (this.IncDec.and && this.SeqDec.T3) ||\n      this.SeqDec.T0;\n\n    this.loadPC =\n      this.SeqDec.T2 && (this.IncDec.jump || (this.IncDec.jumpz && this.ACZ));\n\n    this.loadDR =\n      this.SeqDec.T3 &&\n      (this.IncDec.load || this.IncDec.add || this.IncDec.And);\n\n    this.loadIR = this.SeqDec.T1;\n\n    this.rstSC =\n      (this.IncDec.load && this.SeqDec.T4) ||\n      (this.IncDec.store && this.SeqDec.T3) ||\n      (this.IncDec.add && this.SeqDec.T4) ||\n      (this.IncDec.and && this.SeqDec.T4) ||\n      (this.IncDec.comp && this.SeqDec.T2) ||\n      (this.IncDec.lsl && this.SeqDec.T2) ||\n      (this.IncDec.jump && this.SeqDec.T2) ||\n      (this.IncDec.jumpz && this.SeqDec.T2);\n\n    this.ALUEncoder.setInput(\n      0,\n      this.signalLED(ids.LED_SIG_ADD_T4, this.IncDec.add && this.SeqDec.T4)\n    );\n    this.ALUEncoder.setInput(\n      1,\n      this.signalLED(ids.LED_SIG_AND_T4, this.IncDec.and && this.SeqDec.T4)\n    );\n    this.ALUEncoder.setInput(\n      2,\n      this.signalLED(ids.LED_SIG_COMP_T2, this.IncDec.comp && this.SeqDec.T2)\n    );\n    this.ALUEncoder.setInput(\n      3,\n      this.signalLED(ids.LED_SIG_LSL_T2, this.IncDec.lsl && this.SeqDec.T2)\n    );\n    this.ALUEncoder.setInput(\n      4,\n      this.signalLED(ids.LED_SIG_LOAD_T4, this.IncDec.load && this.SeqDec.T4)\n    );\n  }\n\n  public tick() {\n    this.signals();\n    this.tickRegisters();\n    this.signals();\n  }\n\n  tickRegisters() {\n    let clks: { tick: () => void }[] = [\n      this.Mem,\n      this.AR,\n      this.PC,\n      this.DR,\n      this.AC,\n      this.IR,\n      this.SC,\n    ];\n    clks.forEach((comp) => {\n      comp.tick();\n    });\n  }\n\n  public get(id: string) {\n    return this.diagramSVG.getElementById(id);\n  }\n\n  public high(id: string | Array<string>) {\n    if (Array.isArray(id)) id.forEach((_id) => this.high(_id));\n    else this.get(id)?.setAttribute(\"fill\", this.ledGreen);\n  }\n\n  public low(id: string | Array<string>) {\n    if (Array.isArray(id)) id.forEach((_id) => this.low(_id));\n    else this.get(id)?.setAttribute(\"fill\", this.ledGray);\n  }\n\n  public changeText(id: string | Array<string>, value: string) {\n    if (Array.isArray(id)) {\n      id.forEach((_id) => this.changeText(_id, value));\n      return;\n    }\n    let txtObject = this.get(id);\n    if (txtObject != null) {\n      txtObject.innerHTML = value;\n      if (txtObject.previousElementSibling?.tagName === \"foreignObject\") {\n        let child = txtObject.previousElementSibling;\n        while (child.childElementCount) child = child.children[0];\n        child.innerHTML = value;\n      }\n    }\n  }\n\n  public loadMemArray(array: Array<number>) {\n    this.Mem.memArray = array;\n  }\n\n  public dig_write(id: string | Array<string>, value: number, dig: number = 4) {\n    let hexValue: string = HEX(value, dig);\n    this.changeText(id, hexValue);\n  }\n\n  set loadM(value: boolean) {\n    this.Mem.WE = value;\n    this.signalLED(ids.LED_SIG_LOADM, value);\n    console.log(\"loadM: \" + value);\n  }\n\n  set loadAR(value: boolean) {\n    this.AR.load = value;\n    this.signalLED(ids.LED_SIG_LOADAR, value);\n    console.log(\"loadAR: \" + value);\n  }\n\n  set loadPC(v: boolean) {\n    this.PC.load = v;\n    this.signalLED(ids.LED_SIG_LOADPC, v);\n    console.log(\"loadPC: \" + v);\n  }\n\n  set enPC(v: boolean) {\n    this.PC.en = v;\n    this.signalLED(ids.LED_SIG_ENPC, v);\n    console.log(\"enPC: \" + v);\n  }\n\n  set loadDR(v: boolean) {\n    this.DR.load = v;\n    this.signalLED(ids.LED_SIG_LOADDR, v);\n    console.log(\"loadDR: \" + v);\n  }\n\n  set loadAC(v: boolean) {\n    this.AC.load = v;\n    this.signalLED(ids.LED_SIG_LOADAC, v);\n    console.log(\"loadAC: \" + v);\n  }\n\n  set loadIR(v: boolean) {\n    this.IR.load = v;\n    this.signalLED(ids.LED_SIG_LOADIR, v);\n    console.log(\"loadIR: \" + v);\n  }\n\n  set rstSC(v: boolean) {\n    this.SC.rst = v;\n    this.signalLED(ids.LED_SIG_RSTSC, v);\n    console.log(\"rstSC: \" + v);\n  }\n\n  signalLED(LEDid: string | string[], value: boolean): boolean {\n    value ? this.high(LEDid) : this.low(LEDid);\n    return value;\n  }\n}\n","// Syntax highlight for JS\n\nconst asm = (el: HTMLElement) => {\n  for (const node of el.children) {\n    const s = (<HTMLElement>node).innerText\n      .replace(/(\\/\\/.*)/g, \"<span class='comment'>$1</span>\")\n      .replace(\n        /\\b(load|store|add|and|jump|jumpz)(\\s+)(\\d+)/g,\n        \"<span class='func'>$1</span>$2<span class='param'>$3</span>\"\n      )\n      .replace(/\\b(comp|lsl)/g, \"<span class='func'>$1</span>\")\n      .replace(/^(\\d+)/g, \"<span class='number'>$1</span>\");\n    node.innerHTML = s.split(\"\\n\").join(\"<br/>\");\n  }\n};\n\nexport const Editor = (el: HTMLElement, highlight = asm, tab = \"    \") => {\n  const caret = () => {\n    const range = window.getSelection()!.getRangeAt(0);\n    const prefix = range.cloneRange();\n    prefix.selectNodeContents(el);\n    prefix.setEnd(range.endContainer, range.endOffset);\n    return prefix.toString().length;\n  };\n\n  const setCaret = (pos: number, parent = el) => {\n    for (const node of parent.childNodes) {\n      if (node.nodeType == Node.TEXT_NODE) {\n        if ((<Text>node).length >= pos) {\n          const range = document.createRange();\n          const sel = window.getSelection();\n          range.setStart(node, pos);\n          range.collapse(true);\n          sel?.removeAllRanges();\n          sel?.addRange(range);\n          return -1;\n        } else {\n          pos = pos - (<Text>node).length;\n        }\n      } else {\n        pos = setCaret(pos, <HTMLElement>node);\n        if (pos < 0) {\n          return pos;\n        }\n      }\n    }\n    return pos;\n  };\n\n  highlight(el);\n\n  el.addEventListener(\"keydown\", (e) => {\n    if (e.code === \"Tab\") {\n      const pos = caret() + tab.length;\n      const range = window.getSelection()?.getRangeAt(0);\n      range?.deleteContents();\n      range?.insertNode(document.createTextNode(tab));\n      highlight(el);\n      setCaret(pos);\n      e.preventDefault();\n    }\n  });\n\n  el.addEventListener(\"keyup\", (e) => {\n    if (e.keyCode >= 0x30 || e.keyCode == 0x20) {\n      const pos = caret();\n      highlight(el);\n      setCaret(pos);\n    }\n  });\n};\n","// import * as bootstrap from \"bootstrap\";\nimport { Diagram, HEX } from \"./diagram\";\nimport { Editor } from \"./codeEditor\";\n\nlet diagram: Diagram;\nlet editor: HTMLElement | null;\nlet memory: HTMLElement | null;\nlet memBoxWidth = 1;\nlet state: HTMLElement | null;\nlet ops = [\"load\", \"store\", \"add\", \"and\", \"jump\", \"jumpz\", \"comp\", \"lsl\"];\nlet RTLs = [\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Load.T2: AR <- IR[11:0]\",\n    \"Load.T3: DR <- Mem[AR]\",\n    \"Load.T4: AC <- DR, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Store.T2: AR <- IR[11:0]\",\n    \"Store.T3: Mem[AR] <- AC, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Add.T2: AR <- IR[11:0]\",\n    \"Add.T2: DR <- Mem[AR]\",\n    \"Add.T4: AC <- AC+DR, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"And.T2: AR <- IR[11:0]\",\n    \"And.T3: DR <- Mem[AR]\",\n    \"And.T4: AC <- AC & DR, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Jump.T2: PC <- IR[11:0], SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Jumpz.T2.z: PC <- IR[11:0], Jumpz.T2: SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Comp.T3: AC <- ~AC, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"LSL.T2: AC <- LSL(AC), SC <- 0\",\n  ],\n];\n\nlet paramFunc = /^\\s*(load|store|add|and|jump|jumpz)\\s*(\\d+)\\s*(?:\\/\\/.*)?$/;\nlet noParamFunc = /^\\s*(comp|lsl)\\s*(?:\\/\\/.*)?$/;\nlet literal = /^\\s*(\\d+)\\s*(?:\\/\\/.*)?$/;\nlet nothing = /^\\s*(?:\\/\\/.*)?$/;\n\nfunction asmbler(lines: string[]): [true, number[]] | [false, number] {\n  let res = new Array<number>(4096);\n  for (let index = 0; index < lines.length; index++) {\n    let line = lines[index];\n    let value = 0;\n    if (paramFunc.test(line)) {\n      let matches = line.match(paramFunc);\n      value = (ops.indexOf(matches![1]) << 12) + parseInt(matches![2]);\n    } else if (noParamFunc.test(line)) {\n      let matches = line.match(noParamFunc);\n      value = ops.indexOf(matches![1]) << 12;\n    } else if (literal.test(line)) {\n      value = parseInt(line.match(literal)![1]);\n    } else if (nothing.test(line)) {\n      value = 0;\n    } else {\n      return [false, index];\n    }\n    res[index] = value;\n  }\n  return [true, res];\n}\n\nfunction ce(\n  tag: string | { tagName: string; cls: string[] },\n  ...contents: (string | Node | (() => Node[]))[]\n): Node {\n  let elem: HTMLElement;\n  if (typeof tag === \"string\") elem = document.createElement(tag);\n  else {\n    elem = document.createElement(tag.tagName);\n    elem.classList.add(...tag.cls);\n  }\n  contents.forEach((content) => {\n    if (typeof content === \"function\") elem.append(...content());\n    else elem.append(content);\n  });\n  return <Node>elem;\n}\n\nfunction renderMem() {\n  return ce(\"table\", () => {\n    let rows = [\n      // ce(\"tr\", ce(\"th\", \" \"), () => {\n      //   let cols = [];\n      //   for (let c = 0; c < memBoxWidth; c++) {\n      //     cols.push(ce(\"th\", HEX(c)));\n      //   }\n      //   return cols;\n      // }),\n      ce(\"thead\", () => {\n        let header = ce(\"td\", \"Memory\");\n        (<HTMLElement>header).setAttribute(\"colspan\", \"2\");\n        return [header];\n      }),\n    ];\n    for (let i = 0; i < 4095; i += memBoxWidth) {\n      rows.push(\n        ce(\"tr\", ce({ tagName: \"td\", cls: [\"addr\"] }, HEX(i, 3)), () => {\n          let cols = [];\n          for (let c = 0; c < memBoxWidth; c++) {\n            cols.push(\n              ce(\n                {\n                  tagName: \"td\",\n                  cls: diagram.Mem.memArray[i + c]\n                    ? [\"data\"]\n                    : [\"data\", \"zero\"],\n                },\n                HEX(diagram.Mem.memArray[i + c])\n              )\n            );\n          }\n          return cols;\n        })\n      );\n    }\n    return rows;\n  });\n}\n\nfunction resetMem() {\n  memory?.remove();\n  memory = <HTMLElement>renderMem();\n  document.getElementById(\"memory\")?.append(memory);\n  diagram.Mem.onArrayChange = (s, i, v) => {\n    let changedTr = memory?.childNodes[Math.floor(i / memBoxWidth) + 1];\n    let changedTd = changedTr?.childNodes[1];\n    (<HTMLElement>changedTr).classList.add(\"changed\");\n    if (v) (<HTMLElement>changedTd).classList.remove(\"zero\");\n    else (<HTMLElement>changedTd).classList.add(\"zero\");\n    (<HTMLElement>changedTd).innerText = HEX(v, 4);\n    (<HTMLElement>changedTr)?.scrollIntoView({ block: \"center\" });\n    setTimeout(() => {\n      (<HTMLElement>changedTr).classList.remove(\"changed\");\n    }, 5000);\n  };\n  if (state) state.innerText = `Memory cleared, Click Compile to load program`;\n}\n\nexport function compile() {\n  let code = Array<string>();\n  editor?.childNodes.forEach((node) => {\n    if (node.nodeType === Node.TEXT_NODE) return;\n    if ((<HTMLElement>node).innerText !== \"\\n\")\n      code.push((<HTMLElement>node).innerText);\n    else code.push(\"\");\n  });\n  let [compiled, res] = asmbler(code);\n  if (compiled) {\n    diagram.loadMemArray(<number[]>res);\n    resetMem();\n\n    if (state) state.innerText = `Ready. Click Run to start`;\n  } else {\n    console.error(`Error at line: ${res}`);\n    if (state) state.innerText = `Error at line: ${res}`;\n  }\n  return compiled;\n}\n\nfunction tick() {\n  diagram.tick();\n  if (state)\n    state.innerText = RTLs[diagram.IncDec.output][diagram.SeqDec.output];\n}\n\nlet interval: number;\n\nexport function run() {\n  let stopBtn = <HTMLInputElement>document.getElementById(\"btn-pause\");\n  stopBtn.disabled = false;\n  tick();\n  interval = setTimeout(() => {\n    run();\n  }, timeout);\n}\n\nexport function stop() {\n  let stopBtn = <HTMLInputElement>document.getElementById(\"btn-pause\");\n  stopBtn.disabled = true;\n  clearTimeout(interval);\n}\n\nexport function next() {\n  tick();\n}\n\nexport function reset() {\n  stop();\n  diagram = new Diagram(diagram.diagramSVG);\n  diagram.signals();\n  resetMem();\n}\n\nlet timeout = 1000;\n\nfunction changeTimeout() {\n  timeout =\n    10500 -\n    (<HTMLInputElement>document.getElementById(\"rng-speed\"))?.valueAsNumber;\n  let freq = document.getElementById(\"freq\");\n  if (freq) freq.innerHTML = `${Math.round(1000000 / timeout)} nHz`;\n  console.log(`timeout: ${timeout}`);\n}\n\nconst height = window.innerHeight;\n\nfunction main() {\n  document.body.style.height = height.toString() + \"px\";\n  console.clear();\n  let svg = <XMLDocument>(\n    (<HTMLObjectElement>document.getElementById(\"diagram\"))?.contentDocument\n  );\n  if (svg) {\n    diagram = new Diagram(svg);\n  } else throw new Error(\"Could not find diagram\");\n\n  // Turn div into an editor\n  editor = document.getElementById(\"editor\");\n  if (editor) {\n    Editor(editor);\n    editor?.focus();\n    compile();\n  } else throw new Error(\"Could not find editor\");\n  state = document.getElementById(\"state\");\n  let speedSlider = document.getElementById(\"rng-speed\");\n  if (speedSlider) {\n    timeout = 10500 - (<HTMLInputElement>speedSlider).valueAsNumber;\n    let freq = document.getElementById(\"freq\");\n    if (freq) freq.innerHTML = `${Math.round(1000000 / timeout)} nHz`;\n  }\n}\n\nwindow.addEventListener(\"load\", main);\ndocument.getElementById(\"btn-compile\")?.addEventListener(\"click\", compile);\ndocument.getElementById(\"btn-run\")?.addEventListener(\"click\", run);\ndocument.getElementById(\"btn-reset\")?.addEventListener(\"click\", reset);\ndocument.getElementById(\"btn-pause\")?.addEventListener(\"click\", stop);\ndocument.getElementById(\"rng-speed\")?.addEventListener(\"input\", changeTimeout);\n"],"names":["$19af7fc36c3816c1$export$ef31c55765759ec","LED_SIG_LOADM","LED_SIG_LOADAR","LED_SIG_LOADPC","LED_SIG_ENPC","LED_SIG_LOADDR","LED_SIG_LOADAC","LED_SIG_LOADINPR","LED_SIG_LOADTR","LED_SIG_LOADIR","LED_SIG_LOADOUTR","LED_SIG_ADD_T4","LED_SIG_AND_T4","LED_SIG_COMP_T2","LED_SIG_LSL_T2","LED_SIG_LOAD_T4","LED_COMBUS_MUX","LED_INC_DEC","LED_SEQ_DEC","LED_SIG_RSTSC","LED_Z","LED_CLK","NUM_MEM_OUT","NUM_MEM_DATA","NUM_AR_DATA","NUM_AR_VALUE","NUM_AR_OUT","NUM_PC_DATA","NUM_PC_VALUE","NUM_PC_OUT","NUM_DR_DATA","NUM_DR_VALUE","NUM_DR_OUT","NUM_AC_VALUE","NUM_AC_OUT","NUM_ALU_FUNCNUM","TXT_ALU_FUNC","NUM_ALU_OUT","NUM_IR_DATA","NUM_IR_VALUE","NUM_IR_OUT","NUM_TR_DATA","NUM_OUTR_DATA","NUM_SC_VALUE","NUM_COMMON_BUS_VALUE","NUM_COMMON_BUS_SELECT","$7507b7756924af00$export$ab3b77028c846f42","value","pad","toString","padStart","$7507b7756924af00$var$Component","onOutputChange","_output","constructor","diagram","this","output","onOutputChanged","$7507b7756924af00$var$Multiplexer","_select","outNUM","selectNUM","inputsLEDs","inputCount","super","inputs","Array","update","select","dig_write","forEach","LEDid","index","high","low","setInput","$7507b7756924af00$var$Memory","WE","data","onArrayChange","_addr","outputNUM","memSize","_memArray","memArray","addr","tick","console","log","$7507b7756924af00$var$Register","load","rst","name","valueNUM","en","bitCount","maximum","Math","pow","nibbleCount","ceil","tmp","$7507b7756924af00$var$Counter","$7507b7756924af00$var$ALU","_portA","_portB","_func","functions","a","b","functionNames","funcName","portA","portB","func","changeText","$7507b7756924af00$var$Decoder","outputLEDs","outputLabels","label","Object","defineProperty","get","input","LEDId","$7507b7756924af00$var$Encoder","inputLEDIds","outNum","key","i","length","id","$7507b7756924af00$export$5b87a37ba02474f4","ledGreen","ledGray","CLKup","ACZ","diagramSVG","Mem","AR","PC","DR","ALU","AC","IR","CommonBus","ALUEncoder","SeqDec","IncDec","SC","v","signalLED","inc","floor","comp","signals","T1","T3","Add","T2","And","T0","store","add","jump","jumpz","enPC","loadAC","T4","and","lsl","loadM","loadAR","loadPC","loadDR","loadIR","rstSC","tickRegisters","getElementById","isArray","_id","setAttribute","txtObject","innerHTML","previousElementSibling","tagName","child","childElementCount","children","loadMemArray","array","dig","hexValue","$012235c28acc561e$var$asm","el","node","s","innerText","replace","split","join","$012235c28acc561e$export$7cda8d932e2f33c0","highlight","tab","caret","range","window","getSelection","getRangeAt","prefix","cloneRange","selectNodeContents","setEnd","endContainer","endOffset","setCaret","pos","parent","childNodes","nodeType","Node","TEXT_NODE","document","createRange","sel","setStart","collapse","removeAllRanges","addRange","addEventListener","e","code","deleteContents","insertNode","createTextNode","preventDefault","keyCode","$f43313d21d3fd8e2$var$diagram","$f43313d21d3fd8e2$var$editor","$f43313d21d3fd8e2$var$memory","$f43313d21d3fd8e2$var$state","$f43313d21d3fd8e2$var$interval","$f43313d21d3fd8e2$var$memBoxWidth","$f43313d21d3fd8e2$var$ops","$f43313d21d3fd8e2$var$RTLs","$f43313d21d3fd8e2$var$paramFunc","$f43313d21d3fd8e2$var$noParamFunc","$f43313d21d3fd8e2$var$literal","$f43313d21d3fd8e2$var$nothing","$f43313d21d3fd8e2$var$ce","tag","contents","elem","createElement","classList","cls","content","append","$f43313d21d3fd8e2$var$resetMem","remove","rows","header","push","cols","c","changedTr","changedTd","scrollIntoView","block","setTimeout","$f43313d21d3fd8e2$export$ef7acd7185315e22","compiled","res","lines","line","test","matches","match","indexOf","parseInt","$f43313d21d3fd8e2$var$asmbler","error","$f43313d21d3fd8e2$var$tick","$f43313d21d3fd8e2$export$fa6813432f753b0d","disabled","clearTimeout","$f43313d21d3fd8e2$var$timeout","$f43313d21d3fd8e2$var$height","innerHeight","body","style","height","clear","svg","contentDocument","Error","focus","speedSlider","valueAsNumber","freq","round","$f43313d21d3fd8e2$export$889ea624f2cb2c57"],"version":3,"file":"index.0cd5bcf0.js.map"}