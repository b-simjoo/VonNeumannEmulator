{"mappings":"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","sources":["src/app.ts"],"sourcesContent":["let diagram: Diagram;\nlet editor: HTMLElement | null;\nlet memory: HTMLElement | null;\nlet memBoxWidth = 8;\nlet state: HTMLElement | null;\nlet ops = [\"load\", \"store\", \"add\", \"and\", \"jump\", \"jumpz\", \"comp\", \"lsl\"];\nlet RTLs = [\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Load.T2: AR <- IR[11:0]\",\n    \"Load.T3: DR <- Mem[AR]\",\n    \"Load.T4: AC <- DR, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Store.T2: AR <- IR[11:0]\",\n    \"Store.T3: Mem[AR] <- AC, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Add.T2: AR <- IR[11:0]\",\n    \"Add.T2: DR <- Mem[AR]\",\n    \"Add.T4: AC <- AC+DR, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"And.T2: AR <- IR[11:0]\",\n    \"And.T3: DR <- Mem[AR]\",\n    \"And.T4: AC <- AC & DR, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Jump.T2: PC <- IR[11:0], SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Jumpz.T2.z: PC <- IR[11:0], Jumpz.T2: SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"Comp.T3: AC <- ~AC, SC <- 0\",\n  ],\n  [\n    \"T0: AR <- PC, PC <- PC+1\",\n    \"T1: IR <- Mem[AR]\",\n    \"LSL.T2: AC <- LSL(AC), SC <- 0\",\n  ],\n];\n\nlet paramFunc = /^\\s*(load|store|add|and|jump|jumpz)\\s*(\\d+)\\s*(?:\\/\\/.*)?$/;\nlet noParamFunc = /^\\s*(comp|lsl)\\s*(?:\\/\\/.*)?$/;\nlet literal = /^\\s*(\\d+)\\s*(?:\\/\\/.*)?$/;\nlet nothing = /^\\s*(?:\\/\\/.*)?$/;\n\nfunction asmbler(lines: string[]): [true, number[]] | [false, number] {\n  let res = new Array<number>(4096);\n  for (let index = 0; index < lines.length; index++) {\n    let line = lines[index];\n    let value = 0;\n    if (paramFunc.test(line)) {\n      let matches = line.match(paramFunc);\n      value = (ops.indexOf(matches![1]) << 12) + parseInt(matches![2]);\n    } else if (noParamFunc.test(line)) {\n      let matches = line.match(noParamFunc);\n      value = ops.indexOf(matches![1]) << 12;\n    } else if (literal.test(line)) {\n      value = parseInt(line.match(literal)![1]);\n    } else if (nothing.test(line)) {\n      value = 0;\n    } else {\n      return [false, index];\n    }\n    res[index] = value;\n  }\n  return [true, res];\n}\n\nfunction ce(\n  tag: string | { tagName: string; cls: string[] },\n  ...contents: (string | Node | (() => Node[]))[]\n): Node {\n  let elem: HTMLElement;\n  if (typeof tag === \"string\") elem = document.createElement(tag);\n  else {\n    elem = document.createElement(tag.tagName);\n    elem.classList.add(...tag.cls);\n  }\n  contents.forEach((content) => {\n    if (typeof content === \"function\") elem.append(...content());\n    else elem.append(content);\n  });\n  return <Node>elem;\n}\n\nfunction renderMem() {\n  return ce(\"table\", () => {\n    let rows = [\n      ce(\"tr\", ce(\"th\", \" \"), () => {\n        let cols = [];\n        for (let c = 0; c < memBoxWidth; c++) {\n          cols.push(ce(\"th\", HEX(c)));\n        }\n        return cols;\n      }),\n    ];\n    for (let i = 0; i < 4095; i += memBoxWidth) {\n      rows.push(\n        ce(\"tr\", ce(\"td\", HEX(i, 3)), () => {\n          let cols = [];\n          for (let c = 0; c < memBoxWidth; c++) {\n            cols.push(\n              ce(\n                {\n                  tagName: \"td\",\n                  cls: diagram.Mem.memArray[i + c] ? [] : [\"zero\"],\n                },\n                HEX(diagram.Mem.memArray[i + c])\n              )\n            );\n          }\n          return cols;\n        })\n      );\n    }\n    return rows;\n  });\n}\n\nfunction resetMem() {\n  memory?.remove();\n  memory = <HTMLElement>renderMem();\n  document.getElementById(\"memory\")?.append(memory);\n  diagram.Mem.onArrayChange = (s, i, v) => {\n    let td =\n      memory?.childNodes[Math.floor(i / memBoxWidth) + 1]?.childNodes[\n        (i % memBoxWidth) + 1\n      ];\n    (<HTMLElement>td).classList.add(\"changed\");\n    if (v) (<HTMLElement>td).classList.remove(\"zero\");\n    else (<HTMLElement>td).classList.add(\"zero\");\n    (<HTMLElement>td).innerText = HEX(v, 4);\n    setTimeout(() => {\n      (<HTMLElement>td).classList.remove(\"changed\");\n    }, 5000);\n  };\n  if (state) state.innerText = `Memory cleared, Click Compile to load program`;\n}\n\nfunction compile() {\n  let code = Array<string>();\n  editor?.childNodes.forEach((node) => {\n    if (node.nodeType === Node.TEXT_NODE) return;\n    if ((<HTMLElement>node).innerText !== \"\\n\")\n      code.push((<HTMLElement>node).innerText);\n    else code.push(\"\");\n  });\n  let [compiled, res] = asmbler(code);\n  if (compiled) {\n    diagram.loadMemArray(<number[]>res);\n    resetMem();\n\n    if (state) state.innerText = `Ready. Click Run to start`;\n  } else {\n    console.error(`Error at line: ${res}`);\n    if (state) state.innerText = `Error at line: ${res}`;\n  }\n  return compiled;\n}\n\nfunction tick() {\n  diagram.tick();\n  diagram.tick();\n  if (state)\n    state.innerText = RTLs[diagram.IncDec.output][diagram.SeqDec.output];\n}\n\nlet interval: number;\n\nfunction run() {\n  let stopBtn = <HTMLInputElement>document.getElementById(\"pause\");\n  stopBtn.disabled = false;\n  tick();\n  interval = setTimeout(() => {\n    run();\n  }, timeout);\n}\n\nfunction stop() {\n  let stopBtn = <HTMLInputElement>document.getElementById(\"pause\");\n  stopBtn.disabled = true;\n  clearTimeout(interval);\n}\n\nfunction next() {\n  tick();\n}\n\nfunction reset() {\n  stop();\n  diagram = new Diagram(diagram.diagramSVG);\n  diagram.tick();\n  diagram.CLKup = false;\n  resetMem();\n}\n\nlet timeout = 1000;\n\nwindow.onload = function () {\n  console.clear();\n  let svg = <XMLDocument>(\n    (<HTMLObjectElement>document.getElementById(\"diagram\"))?.contentDocument\n  );\n  if (svg) {\n    diagram = new Diagram(svg);\n  } else throw new Error(\"Could not find diagram\");\n\n  // Turn div into an editor\n  editor = document.getElementById(\"editor\");\n  if (editor) {\n    Editor(editor);\n    editor?.focus();\n    compile();\n  } else throw new Error(\"Could not find editor\");\n  state = document.getElementById(\"state\");\n  let speedSlider = document.getElementById(\"speed\");\n  if (speedSlider) {\n    timeout = 11000 - (<HTMLInputElement>speedSlider).valueAsNumber;\n    let freq = document.getElementById(\"freq\");\n    if (freq) freq.innerHTML = `${Math.round(1000000 / timeout)} nHz`;\n    console.log(`timeout: ${timeout}`);\n    speedSlider.oninput = () => {\n      timeout = 11000 - (<HTMLInputElement>speedSlider).valueAsNumber;\n      let freq = document.getElementById(\"freq\");\n      if (freq) freq.innerHTML = `${Math.round(1000000 / timeout)} nHz`;\n      console.log(`timeout: ${timeout}`);\n    };\n  }\n};\n"],"names":["diagram","editor","memory","state","interval","memBoxWidth","ops","RTLs","paramFunc","noParamFunc","literal","nothing","asmbler","lines","res","Array","index","length","line","value","test","matches","match","indexOf","parseInt","ce","tag","contents","elem","document","createElement","tagName","classList","add","cls","forEach","content","append","renderMem","rows","cols","c","push","HEX","i","Mem","memArray","resetMem","remove","getElementById","onArrayChange","s","v","td","childNodes","Math","floor","innerText","setTimeout","compile","code","node","nodeType","Node","TEXT_NODE","compiled","loadMemArray","console","error","tick","IncDec","output","SeqDec","run","disabled","timeout","stop","clearTimeout","next","reset","Diagram","diagramSVG","CLKup","window","onload","clear","svg","contentDocument","Error","Editor","focus","speedSlider","valueAsNumber","freq","innerHTML","round","log","oninput"],"version":3,"file":"index.104d5ee2.js.map"}